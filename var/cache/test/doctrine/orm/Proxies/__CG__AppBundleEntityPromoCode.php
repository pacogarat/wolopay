<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PromoCode extends \AppBundle\Entity\PromoCode implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'code', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'promo', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'app', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'gamers', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'article', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'countNTimeUsed', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'value', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'isPercent', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'nUsesPerUser', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'nTotalUses', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'beginAt', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'endAt', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'code', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'promo', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'app', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'gamers', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'article', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'countNTimeUsed', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'value', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'isPercent', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'nUsesPerUser', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'nTotalUses', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'beginAt', '' . "\0" . 'AppBundle\\Entity\\PromoCode' . "\0" . 'endAt', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PromoCode $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountNTimeUsed($countNTimeUsed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountNTimeUsed', [$countNTimeUsed]);

        return parent::setCountNTimeUsed($countNTimeUsed);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountNTimeUsed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountNTimeUsed', []);

        return parent::getCountNTimeUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function setValue($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValue', [$value]);

        return parent::setValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValue', []);

        return parent::getValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPercent($isPercent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPercent', [$isPercent]);

        return parent::setIsPercent($isPercent);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPercent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPercent', []);

        return parent::getIsPercent();
    }

    /**
     * {@inheritDoc}
     */
    public function setNUsesPerUser($nUsesPerUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNUsesPerUser', [$nUsesPerUser]);

        return parent::setNUsesPerUser($nUsesPerUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getNUsesPerUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNUsesPerUser', []);

        return parent::getNUsesPerUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setNTotalUses($nTotalUses = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNTotalUses', [$nTotalUses]);

        return parent::setNTotalUses($nTotalUses);
    }

    /**
     * {@inheritDoc}
     */
    public function sumCountNTimeUsed($sumCountNTimeUsed = 1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'sumCountNTimeUsed', [$sumCountNTimeUsed]);

        return parent::sumCountNTimeUsed($sumCountNTimeUsed);
    }

    /**
     * {@inheritDoc}
     */
    public function getNTotalUses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNTotalUses', []);

        return parent::getNTotalUses();
    }

    /**
     * {@inheritDoc}
     */
    public function setBeginAt($beginAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBeginAt', [$beginAt]);

        return parent::setBeginAt($beginAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getBeginAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBeginAt', []);

        return parent::getBeginAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndAt($endAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndAt', [$endAt]);

        return parent::setEndAt($endAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndAt', []);

        return parent::getEndAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPromo(\AppBundle\Entity\Promo $promo = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPromo', [$promo]);

        return parent::setPromo($promo);
    }

    /**
     * {@inheritDoc}
     */
    public function getPromo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPromo', []);

        return parent::getPromo();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticle(\AppBundle\Entity\Article $article = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticle', [$article]);

        return parent::setArticle($article);
    }

    /**
     * {@inheritDoc}
     */
    public function getArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticle', []);

        return parent::getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setApp(\AppBundle\Entity\App $app = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApp', [$app]);

        return parent::setApp($app);
    }

    /**
     * {@inheritDoc}
     */
    public function getApp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApp', []);

        return parent::getApp();
    }

    /**
     * {@inheritDoc}
     */
    public function addGamer($gamers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGamer', [$gamers]);

        return parent::addGamer($gamers);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGamer(\AppBundle\Entity\Gamer $gamers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGamer', [$gamers]);

        return parent::removeGamer($gamers);
    }

    /**
     * {@inheritDoc}
     */
    public function getGamers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGamers', []);

        return parent::getGamers();
    }

    /**
     * {@inheritDoc}
     */
    public function setGamers($gamers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGamers', [$gamers]);

        return parent::setGamers($gamers);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function validate(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', [$context]);

        return parent::validate($context);
    }

}
