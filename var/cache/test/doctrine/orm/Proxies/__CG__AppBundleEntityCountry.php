<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Country extends \AppBundle\Entity\Country implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'localName', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'mcc', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'order', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'vat', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'vatCategory', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'currency', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'continent', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'decimalFormat', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'costOfLiving', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'timeZone', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'utcOffset', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'utcDstOffset', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'language', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'standard', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'createdAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'localName', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'mcc', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'order', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'vat', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'vatCategory', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'currency', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'continent', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'decimalFormat', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'costOfLiving', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'timeZone', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'utcOffset', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'utcDstOffset', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'language', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'standard', '' . "\0" . 'AppBundle\\Entity\\Country' . "\0" . 'createdAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Country $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrency(\AppBundle\Entity\Currency $currency = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrency', [$currency]);

        return parent::setCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency', []);

        return parent::getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguage(\AppBundle\Entity\Language $language = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguage', [$language]);

        return parent::setLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguage', []);

        return parent::getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder($order)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$order]);

        return parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', []);

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setMCC($mcc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMCC', [$mcc]);

        return parent::setMCC($mcc);
    }

    /**
     * {@inheritDoc}
     */
    public function getMCC()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMCC', []);

        return parent::getMCC();
    }

    /**
     * {@inheritDoc}
     */
    public function setVat($vat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVat', [$vat]);

        return parent::setVat($vat);
    }

    /**
     * {@inheritDoc}
     */
    public function getVat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVat', []);

        return parent::getVat();
    }

    /**
     * {@inheritDoc}
     */
    public function setContinent($continent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContinent', [$continent]);

        return parent::setContinent($continent);
    }

    /**
     * {@inheritDoc}
     */
    public function getContinent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContinent', []);

        return parent::getContinent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCostOfLiving($costOfLiving)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCostOfLiving', [$costOfLiving]);

        return parent::setCostOfLiving($costOfLiving);
    }

    /**
     * {@inheritDoc}
     */
    public function getCostOfLiving()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCostOfLiving', []);

        return parent::getCostOfLiving();
    }

    /**
     * {@inheritDoc}
     */
    public function setVatCategory($vatCategory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVatCategory', [$vatCategory]);

        return parent::setVatCategory($vatCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getVatCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVatCategory', []);

        return parent::getVatCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimeZone($timeZone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimeZone', [$timeZone]);

        return parent::setTimeZone($timeZone);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeZone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeZone', []);

        return parent::getTimeZone();
    }

    /**
     * {@inheritDoc}
     */
    public function setDecimalFormat($decimalFormat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDecimalFormat', [$decimalFormat]);

        return parent::setDecimalFormat($decimalFormat);
    }

    /**
     * {@inheritDoc}
     */
    public function getDecimalFormat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDecimalFormat', []);

        return parent::getDecimalFormat();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocalName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocalName', []);

        return parent::getLocalName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocalName($localName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocalName', [$localName]);

        return parent::setLocalName($localName);
    }

    /**
     * {@inheritDoc}
     */
    public function getUtcOffset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtcOffset', []);

        return parent::getUtcOffset();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtcOffset($utcOffset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtcOffset', [$utcOffset]);

        return parent::setUtcOffset($utcOffset);
    }

    /**
     * {@inheritDoc}
     */
    public function getUtcDstOffset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtcDstOffset', []);

        return parent::getUtcDstOffset();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtcDstOffset($utcDstOffset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtcDstOffset', [$utcDstOffset]);

        return parent::setUtcDstOffset($utcDstOffset);
    }

    /**
     * {@inheritDoc}
     */
    public function isStandardIsoCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStandardIsoCountry', []);

        return parent::isStandardIsoCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setStandard($standard)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStandard', [$standard]);

        return parent::setStandard($standard);
    }

    /**
     * {@inheritDoc}
     */
    public function getStandard()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStandard', []);

        return parent::getStandard();
    }

}
