<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PayMethod extends \AppBundle\Entity\PayMethod implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'payCategory', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'articleCategory', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'payMethodHasProvider', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'imgIcon', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'descriptionLabel', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'createdAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'payCategory', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'articleCategory', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'payMethodHasProvider', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'imgIcon', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'descriptionLabel', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\PayMethod' . "\0" . 'createdAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PayMethod $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPayCategory(\AppBundle\Entity\PayCategory $payCategory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPayCategory', [$payCategory]);

        return parent::setPayCategory($payCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getPayCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayCategory', []);

        return parent::getPayCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function addPayMethodHasProvider(\AppBundle\Entity\PayMethodHasProvider $payMethodHasProvider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPayMethodHasProvider', [$payMethodHasProvider]);

        return parent::addPayMethodHasProvider($payMethodHasProvider);
    }

    /**
     * {@inheritDoc}
     */
    public function removePayMethodHasProvider(\AppBundle\Entity\PayMethodHasProvider $payMethodHasProvider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePayMethodHasProvider', [$payMethodHasProvider]);

        return parent::removePayMethodHasProvider($payMethodHasProvider);
    }

    /**
     * {@inheritDoc}
     */
    public function getPayMethodHasProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayMethodHasProvider', []);

        return parent::getPayMethodHasProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function setImgIcon(\Application\Sonata\MediaBundle\Entity\Media $imgIcon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImgIcon', [$imgIcon]);

        return parent::setImgIcon($imgIcon);
    }

    /**
     * {@inheritDoc}
     */
    public function getImgIcon()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImgIcon', []);

        return parent::getImgIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescriptionLabel(\Lexik\Bundle\TranslationBundle\Entity\TransUnit $descriptionLabel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescriptionLabel', [$descriptionLabel]);

        return parent::setDescriptionLabel($descriptionLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptionLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptionLabel', []);

        return parent::getDescriptionLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticleCategory($articleCategory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticleCategory', [$articleCategory]);

        return parent::setArticleCategory($articleCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getArticleCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticleCategory', []);

        return parent::getArticleCategory();
    }

}
