<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Item extends \AppBundle\Entity\Item implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'app', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'nameLabel', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'descriptionShortLabel', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'descriptionLabel', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'specialType', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'externalItemId', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'unitaryPrice', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'unitaryPriceCountry', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'image', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'articles', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'itemTabs', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'createdAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'app', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'nameLabel', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'descriptionShortLabel', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'descriptionLabel', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'specialType', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'externalItemId', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'unitaryPrice', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'unitaryPriceCountry', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'image', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'articles', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'itemTabs', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\Item' . "\0" . 'createdAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Item $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setApp(\AppBundle\Entity\App $app)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApp', [$app]);

        return parent::setApp($app);
    }

    /**
     * {@inheritDoc}
     */
    public function getApp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApp', []);

        return parent::getApp();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameLabel(\Lexik\Bundle\TranslationBundle\Entity\TransUnit $nameLabel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameLabel', [$nameLabel]);

        return parent::setNameLabel($nameLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameLabel', []);

        return parent::getNameLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescriptionLabel(\Lexik\Bundle\TranslationBundle\Entity\TransUnit $descriptionLabel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescriptionLabel', [$descriptionLabel]);

        return parent::setDescriptionLabel($descriptionLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptionLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptionLabel', []);

        return parent::getDescriptionLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage(\Sonata\MediaBundle\Model\MediaInterface $image = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnitaryPrice($unitaryPrice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnitaryPrice', [$unitaryPrice]);

        return parent::setUnitaryPrice($unitaryPrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitaryPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitaryPrice', []);

        return parent::getUnitaryPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function addArticle(\AppBundle\Entity\Article $articles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addArticle', [$articles]);

        return parent::addArticle($articles);
    }

    /**
     * {@inheritDoc}
     */
    public function removeArticle(\AppBundle\Entity\Article $articles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeArticle', [$articles]);

        return parent::removeArticle($articles);
    }

    /**
     * {@inheritDoc}
     */
    public function getArticles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticles', []);

        return parent::getArticles();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnitaryPriceCountry(\AppBundle\Entity\Country $unitaryPriceCountry = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnitaryPriceCountry', [$unitaryPriceCountry]);

        return parent::setUnitaryPriceCountry($unitaryPriceCountry);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitaryPriceCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitaryPriceCountry', []);

        return parent::getUnitaryPriceCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalItemId($externalItemId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalItemId', [$externalItemId]);

        return parent::setExternalItemId($externalItemId);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalItemId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalItemId', []);

        return parent::getExternalItemId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescriptionShortLabel($descriptionShortLabel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescriptionShortLabel', [$descriptionShortLabel]);

        return parent::setDescriptionShortLabel($descriptionShortLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptionShortLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptionShortLabel', []);

        return parent::getDescriptionShortLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setItemTabs($itemTabs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setItemTabs', [$itemTabs]);

        return parent::setItemTabs($itemTabs);
    }

    /**
     * {@inheritDoc}
     */
    public function addItemTab(\AppBundle\Entity\ItemTab $itemTab)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addItemTab', [$itemTab]);

        return parent::addItemTab($itemTab);
    }

    /**
     * {@inheritDoc}
     */
    public function removeItemTab(\AppBundle\Entity\ItemTab $itemTab)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeItemTab', [$itemTab]);

        return parent::removeItemTab($itemTab);
    }

    /**
     * {@inheritDoc}
     */
    public function getItemTabs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItemTabs', []);

        return parent::getItemTabs();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpecialType($specialType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpecialType', [$specialType]);

        return parent::setSpecialType($specialType);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpecialType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpecialType', []);

        return parent::getSpecialType();
    }

}
