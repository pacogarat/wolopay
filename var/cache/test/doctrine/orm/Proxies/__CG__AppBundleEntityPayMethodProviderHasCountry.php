<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PayMethodProviderHasCountry extends \AppBundle\Entity\PayMethodProviderHasCountry implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'country', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'currency', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'payMethodHasProvider', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'SMSs', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'voices', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'appHasPayMethodProviderCountries', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'priceSentNet', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeCalculatedWithNet', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeProviderPercent', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeProviderFixed', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeProviderMinimal', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeCurrency', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'default', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'keyword', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'textLabel', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'createdAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'country', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'currency', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'payMethodHasProvider', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'SMSs', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'voices', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'appHasPayMethodProviderCountries', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'priceSentNet', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeCalculatedWithNet', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeProviderPercent', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeProviderFixed', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeProviderMinimal', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'feeCurrency', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'default', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'keyword', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'textLabel', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\PayMethodProviderHasCountry' . "\0" . 'createdAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PayMethodProviderHasCountry $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeyword($keyword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeyword', [$keyword]);

        return parent::setKeyword($keyword);
    }

    /**
     * {@inheritDoc}
     */
    public function getKeyword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeyword', []);

        return parent::getKeyword();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvider', []);

        return parent::getProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function getPayMethod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayMethod', []);

        return parent::getPayMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry(\AppBundle\Entity\Country $country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrency(\AppBundle\Entity\Currency $currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrency', [$currency]);

        return parent::setCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency', []);

        return parent::getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setTextLabel(\Lexik\Bundle\TranslationBundle\Entity\TransUnit $textLabel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTextLabel', [$textLabel]);

        return parent::setTextLabel($textLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getTextLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTextLabel', []);

        return parent::getTextLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefault($default)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefault', [$default]);

        return parent::setDefault($default);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefault', []);

        return parent::getDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setPayMethodHasProvider(\AppBundle\Entity\PayMethodHasProvider $payMethodHasProvider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPayMethodHasProvider', [$payMethodHasProvider]);

        return parent::setPayMethodHasProvider($payMethodHasProvider);
    }

    /**
     * {@inheritDoc}
     */
    public function getPayMethodHasProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayMethodHasProvider', []);

        return parent::getPayMethodHasProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function addSMS(\AppBundle\Entity\SMS $sms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSMS', [$sms]);

        return parent::addSMS($sms);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSMS(\AppBundle\Entity\SMS $sms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSMS', [$sms]);

        return parent::removeSMS($sms);
    }

    /**
     * {@inheritDoc}
     */
    public function getSMSs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSMSs', []);

        return parent::getSMSs();
    }

    /**
     * {@inheritDoc}
     */
    public function getSMSById($smsId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSMSById', [$smsId]);

        return parent::getSMSById($smsId);
    }

    /**
     * {@inheritDoc}
     */
    public function getVoiceById($voiceId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVoiceById', [$voiceId]);

        return parent::getVoiceById($voiceId);
    }

    /**
     * {@inheritDoc}
     */
    public function addVoice(\AppBundle\Entity\Voice $voice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVoice', [$voice]);

        return parent::addVoice($voice);
    }

    /**
     * {@inheritDoc}
     */
    public function removeVoice(\AppBundle\Entity\Voice $voice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeVoice', [$voice]);

        return parent::removeVoice($voice);
    }

    /**
     * {@inheritDoc}
     */
    public function getVoices()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVoices', []);

        return parent::getVoices();
    }

    /**
     * {@inheritDoc}
     */
    public function setFeeProviderMinimal($feeProviderMinimal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFeeProviderMinimal', [$feeProviderMinimal]);

        return parent::setFeeProviderMinimal($feeProviderMinimal);
    }

    /**
     * {@inheritDoc}
     */
    public function getFeeProviderMinimal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeeProviderMinimal', []);

        return parent::getFeeProviderMinimal();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentFeeProviderMinimal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentFeeProviderMinimal', []);

        return parent::getCurrentFeeProviderMinimal();
    }

    /**
     * {@inheritDoc}
     */
    public function setFeeProviderPercent($feeProviderPercent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFeeProviderPercent', [$feeProviderPercent]);

        return parent::setFeeProviderPercent($feeProviderPercent);
    }

    /**
     * {@inheritDoc}
     */
    public function getFeeProviderPercent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeeProviderPercent', []);

        return parent::getFeeProviderPercent();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentFeeProviderPercent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentFeeProviderPercent', []);

        return parent::getCurrentFeeProviderPercent();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveCurrent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveCurrent', []);

        return parent::getActiveCurrent();
    }

    /**
     * {@inheritDoc}
     */
    public function getFeeProviderFixed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeeProviderFixed', []);

        return parent::getFeeProviderFixed();
    }

    /**
     * {@inheritDoc}
     */
    public function setFeeProviderFixed($feeProviderFixed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFeeProviderFixed', [$feeProviderFixed]);

        return parent::setFeeProviderFixed($feeProviderFixed);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentFeeProviderFixed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentFeeProviderFixed', []);

        return parent::getCurrentFeeProviderFixed();
    }

    /**
     * {@inheritDoc}
     */
    public function addAppHasPayMethodProviderCountry(\AppBundle\Entity\AppHasPayMethodProviderCountry $appHasPayMethodProviderCountries)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAppHasPayMethodProviderCountry', [$appHasPayMethodProviderCountries]);

        return parent::addAppHasPayMethodProviderCountry($appHasPayMethodProviderCountries);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAppHasPayMethodProviderCountry(\AppBundle\Entity\AppHasPayMethodProviderCountry $appHasPayMethodProviderCountries)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAppHasPayMethodProviderCountry', [$appHasPayMethodProviderCountries]);

        return parent::removeAppHasPayMethodProviderCountry($appHasPayMethodProviderCountries);
    }

    /**
     * {@inheritDoc}
     */
    public function getAppHasPayMethodProviderCountries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAppHasPayMethodProviderCountries', []);

        return parent::getAppHasPayMethodProviderCountries();
    }

    /**
     * {@inheritDoc}
     */
    public function isPriceSentNet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPriceSentNet', []);

        return parent::isPriceSentNet();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriceSentNet($priceSentNet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriceSentNet', [$priceSentNet]);

        return parent::setPriceSentNet($priceSentNet);
    }

    /**
     * {@inheritDoc}
     */
    public function isCurrentPriceSentNet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCurrentPriceSentNet', []);

        return parent::isCurrentPriceSentNet();
    }

    /**
     * {@inheritDoc}
     */
    public function isFeeCalculatedWithNet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFeeCalculatedWithNet', []);

        return parent::isFeeCalculatedWithNet();
    }

    /**
     * {@inheritDoc}
     */
    public function setFeeCalculatedWithNet($feeCalculatedWithNet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFeeCalculatedWithNet', [$feeCalculatedWithNet]);

        return parent::setFeeCalculatedWithNet($feeCalculatedWithNet);
    }

    /**
     * {@inheritDoc}
     */
    public function isCurrentFeeCalculatedWithNet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCurrentFeeCalculatedWithNet', []);

        return parent::isCurrentFeeCalculatedWithNet();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentFeeCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentFeeCurrency', []);

        return parent::getCurrentFeeCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setFeeCurrency($feeCurrency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFeeCurrency', [$feeCurrency]);

        return parent::setFeeCurrency($feeCurrency);
    }

    /**
     * {@inheritDoc}
     */
    public function getFeeCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeeCurrency', []);

        return parent::getFeeCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function validate(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', [$context]);

        return parent::validate($context);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAFixedAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAFixedAmount', []);

        return parent::hasAFixedAmount();
    }

}
