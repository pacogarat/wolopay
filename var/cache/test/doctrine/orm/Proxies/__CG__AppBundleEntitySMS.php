<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SMS extends \AppBundle\Entity\SMS implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'payMethodProviderHasCountry', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'smsAlias', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'aliasDefault', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'shortNumber', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'amount', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'operator', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'smsLogicCategory', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'mobileTextSingUpLabel', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'legalTextLabel', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'checkBoxLabel', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'createdAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'payMethodProviderHasCountry', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'smsAlias', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'aliasDefault', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'shortNumber', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'amount', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'operator', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'smsLogicCategory', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'mobileTextSingUpLabel', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'legalTextLabel', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'checkBoxLabel', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\SMS' . "\0" . 'createdAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SMS $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortNumber($shortNumber)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortNumber', [$shortNumber]);

        return parent::setShortNumber($shortNumber);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortNumber', []);

        return parent::getShortNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', [$amount]);

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', []);

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setPayMethodProviderHasCountry(\AppBundle\Entity\PayMethodProviderHasCountry $payMethodProviderHasCountry)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPayMethodProviderHasCountry', [$payMethodProviderHasCountry]);

        return parent::setPayMethodProviderHasCountry($payMethodProviderHasCountry);
    }

    /**
     * {@inheritDoc}
     */
    public function getPayMethodProviderHasCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayMethodProviderHasCountry', []);

        return parent::getPayMethodProviderHasCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setSmsLogicCategory(\AppBundle\Entity\SMSLogicCategory $smsLogicCategory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSmsLogicCategory', [$smsLogicCategory]);

        return parent::setSmsLogicCategory($smsLogicCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getSmsLogicCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSmsLogicCategory', []);

        return parent::getSmsLogicCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setOperator(\AppBundle\Entity\SMSOperator $operator)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOperator', [$operator]);

        return parent::setOperator($operator);
    }

    /**
     * {@inheritDoc}
     */
    public function getOperator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOperator', []);

        return parent::getOperator();
    }

    /**
     * {@inheritDoc}
     */
    public function setCheckBoxLabel(\Lexik\Bundle\TranslationBundle\Entity\TransUnit $checkBoxLabel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCheckBoxLabel', [$checkBoxLabel]);

        return parent::setCheckBoxLabel($checkBoxLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getCheckBoxLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCheckBoxLabel', []);

        return parent::getCheckBoxLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setAliasDefault($aliasDefault)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAliasDefault', [$aliasDefault]);

        return parent::setAliasDefault($aliasDefault);
    }

    /**
     * {@inheritDoc}
     */
    public function getAliasDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAliasDefault', []);

        return parent::getAliasDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function addSmsAlia(\AppBundle\Entity\SMSAlias $smsAlias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSmsAlia', [$smsAlias]);

        return parent::addSmsAlia($smsAlias);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSmsAlia(\AppBundle\Entity\SMSAlias $smsAlias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSmsAlia', [$smsAlias]);

        return parent::removeSmsAlia($smsAlias);
    }

    /**
     * {@inheritDoc}
     */
    public function getSmsAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSmsAlias', []);

        return parent::getSmsAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function getSmsAliasValid($smsAliasOverride)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSmsAliasValid', [$smsAliasOverride]);

        return parent::getSmsAliasValid($smsAliasOverride);
    }

    /**
     * {@inheritDoc}
     */
    public function setMobileTextSingUpLabel(\Lexik\Bundle\TranslationBundle\Entity\TransUnit $mobileTextSingUpLabel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMobileTextSingUpLabel', [$mobileTextSingUpLabel]);

        return parent::setMobileTextSingUpLabel($mobileTextSingUpLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getMobileTextSingUpLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMobileTextSingUpLabel', []);

        return parent::getMobileTextSingUpLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLegalTextLabel(\Lexik\Bundle\TranslationBundle\Entity\TransUnit $legalTextLabel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLegalTextLabel', [$legalTextLabel]);

        return parent::setLegalTextLabel($legalTextLabel);
    }

    /**
     * {@inheritDoc}
     */
    public function getLegalTextLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLegalTextLabel', []);

        return parent::getLegalTextLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

}
