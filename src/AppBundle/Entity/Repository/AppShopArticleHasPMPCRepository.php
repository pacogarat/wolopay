<?php

namespace AppBundle\Entity\Repository;

use AppBundle\Entity\AppShopArticleHasPMPC;
use AppBundle\Entity\AppShopHasAppTab;
use AppBundle\Entity\Enum\ArticleCategoryEnum;
use AppBundle\Entity\Enum\PayCategoryEnum;
use AppBundle\Helper\UtilHelper;

/**
 * AppShopArticleHasPMPCRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppShopArticleHasPMPCRepository extends AbstractRepository
{
    /**
     * @param int $pmpcaId
     * @param int $levelCategoryId
     * @param bool $active
     * @internal param int $articleStatusId
     * @return \AppBundle\Entity\AppShopArticleHasPMPC
     */
    public function findOneByIdAndLevelCategoryAndStatusFull(
        $pmpcaId,
        $levelCategoryId,
        $active = true
    ) {
        $sql = "
            SELECT apmpc, pmpc, pmp, pm
            FROM AppBundle:AppShopArticleHasPMPC apmpc
            JOIN apmpc.payMethodProviderHasCountry pmpc
            JOIN pmpc.payMethodHasProvider pmp
            JOIN pmp.payMethod pm
            JOIN apmpc.appShopHasArticle asha
            JOIN asha.article a
            JOIN asha.appShop app_shop WITH app_shop.levelCategory = :levelCategoryId AND app_shop.app = a.app

            WHERE
                apmpc = :pmpcaId
                AND apmpc.active = :active
                AND a.active = :active

        ";

        return $this->getEntityManager()->createQuery($sql)->setParameters(
            array(
                'pmpcaId' => $pmpcaId,
                'active' => $active,
                'levelCategoryId'  => $levelCategoryId,
            )
        )->getOneOrNullResult();
    }

    public function findByAppIdAndProviderNameAndCountryAndLevelCategoryandArticleIdAndStatus(
        $appId,
        $providerNameLike,
        $countryId,
        $levelCategoryId,
        $articleId,
        $articleCategoryId = null,
        $articleActive = true,
        $articlePMPCAActive = true
    ) {

        $extra = '';
        $extraParams = [];

        if ($articleCategoryId)
        {
            $extra.=' AND pm.articleCategory = :articleCategoryId';
            $extraParams['articleCategoryId'] = $articleCategoryId;
        }

        $sql = "
            SELECT apmpc, a, sha, pmpc
            FROM AppBundle:AppShopArticleHasPMPC apmpc
            JOIN apmpc.appShopHasArticle sha WITH sha.country = :countryId
            JOIN sha.article a
            JOIN sha.appShop app_shop WITH app_shop.levelCategory = :levelCategoryId AND app_shop.app = :appId

            JOIN apmpc.payMethodProviderHasCountry pmpc WITH pmpc.country = :countryId
            JOIN pmpc.payMethodHasProvider pmp
            JOIN pmp.payMethod pm
            JOIN pmp.provider provider

            WHERE
                 a = :articleId
                AND provider.name like :providerNameLike
                AND apmpc.active = :articlePMPCAActive
                AND a.active = :articleActive

                $extra

            order by apmpc.order
        ";

        return $this->getEntityManager()->createQuery($sql)->setParameters(
            array_merge(
                array(
                    'articlePMPCAActive' => $articlePMPCAActive,
                    'articleActive'      => $articleActive,
                    'countryId'          => $countryId,
                    'appId'              => $appId,
                    'providerNameLike'   => $providerNameLike,
                    'levelCategoryId'    => $levelCategoryId,
                    'articleId'          => $articleId,
                ),
                $extraParams
            )
        )->getResult();
    }

    public function findOneByPMPCandAppShopHasArticleId($pmpcId, $appShopHasArticle)
    {
        $sql = "
            SELECT apmpc, asha, pmpc
            FROM AppBundle:AppShopArticleHasPMPC apmpc
            JOIN apmpc.appShopHasArticle asha
            JOIN apmpc.payMethodProviderHasCountry pmpc

            WHERE
                pmpc = :payMethodProviderHasCountry
                AND asha = :appShopHasArticle


            order by apmpc.order
        ";

        return $this->getEntityManager()->createQuery($sql)->setParameters(
            array(
                'payMethodProviderHasCountry' => $pmpcId,
                'appShopHasArticle'           => $appShopHasArticle,
            )
        )->getOneOrNullResult();
    }

    /**
     * @param $pmpcId
     * @param $articleId
     * @param $levelCategoryId
     * @return AppShopArticleHasPMPC
     */
    public function findOneByPMPCAndArticleIdAndLevelCategory($pmpcId, $articleId, $levelCategoryId)
    {
        $sql = "
            SELECT apmpc, asha,app_shop, pmpc, pmp, pm
            FROM AppBundle:AppShopArticleHasPMPC apmpc
            JOIN apmpc.appShopHasArticle asha
            JOIN asha.appShop app_shop
            JOIN apmpc.payMethodProviderHasCountry pmpc WITH asha.country = pmpc.country
            JOIN pmpc.payMethodHasProvider pmp
            JOIN pmp.payMethod pm

            WHERE
                asha.article = :articleId
                AND pmpc = :payMethodProviderHasCountry
                AND app_shop.levelCategory = :levelCategoryId
                AND pmp.active = 1

            order by apmpc.order
        ";

        return $this->getEntityManager()->createQuery($sql)->setParameters(
            array(
                'articleId'                   => $articleId,
                'payMethodProviderHasCountry' => $pmpcId,
                'levelCategoryId'             => $levelCategoryId,
            )
        )->getOneOrNullResult();
    }

    public function findByPaymentServiceAndAppId(array $paymentServices, $appId)
    {
        $extraSql = '';
        $parameters = [ 'paymentServices' => $paymentServices ];

        if ($appId)
        {
            $parameters['appId']=$appId;
            $extraSql .= 'AND a.app = :appId';
        }

        $sql = "
            SELECT apmpc
            FROM AppBundle:AppShopArticleHasPMPC apmpc
            JOIN apmpc.appShopHasArticle asha
            JOIN asha.article a
            JOIN apmpc.payMethodProviderHasCountry pmpc
            JOIN pmpc.payMethodHasProvider pmp
            WHERE
                 pmp.paymentServiceCategory in (:paymentServices)
                 $extraSql

            order by apmpc.order
        ";

        return $this->getEntityManager()->createQuery($sql)->setParameters($parameters)->getResult();
    }

    /**
     * @param $appId
     * @param $countryId
     * @param $levelCategoryId
     * @param null $articlesId
     * @param \AppBundle\Entity\AppShopHasAppTab $appShopHasAppTab
     * @param null $payMethodsAvailable
     * @param bool $orderByDefault
     * @param bool $articleActive
     * @param bool $articlePMPCAActive
     * @return AppShopArticleHasPMPC[]
     */
    public function findByAppIdAndCountryAndLevelCategoryandArticleIdAndAppTabAndStatus(
        $appId,
        $countryId,
        $levelCategoryId,
        $articlesId = null,
        AppShopHasAppTab $appShopHasAppTab = null,
        $payMethodsAvailable = null,
        $externalStore = null,
        $orderByDefault = true,
        $articleActive = true,
        $articlePMPCAActive = true
    ) {


        $params = array(
            'articlePMPCAActive' => $articlePMPCAActive,
            'articleActive'      => $articleActive,
            'countryId'            => $countryId,
            'appId'                => $appId,
            'levelCategoryId'      => $levelCategoryId,
            'payCategoryMobile'    => PayCategoryEnum::MOBILE_ID,
            'payCategoryVoice'     => PayCategoryEnum::VOICE_ID,
        );

        $extra = '';
        $extraPMPC = '';

        if ($articlesId)
        {
            $params['articlesId'] = $articlesId;
            $extra .= " AND a in (:articlesId)";
        }

        if ($appShopHasAppTab)
        {
            $extra .= " AND a in (:filter_articles)";

            if (!$appShopHasAppTab->getArticles()->isEmpty())
            {
                $params['filter_articles'] = UtilHelper::getIdsArrayFromObjects($appShopHasAppTab->getArticles());
            }else{
                $params['filter_articles'] = [-999]; // because articles_filter is mandatory
            }

            if (!$appShopHasAppTab->getAppTab()->getArticleCategories()->isEmpty())
            {
                $extra .= " AND a.articleCategory in (:filter_articleCategoryIds) ";
                $params['filter_articleCategoryIds'] = UtilHelper::getIdsArrayFromObjects($appShopHasAppTab->getAppTab()->getArticleCategories());
            }

            if (!$appShopHasAppTab->getAppTab()->getPayCategories()->isEmpty())
            {
                $extraPMPC .= " AND pay_method.payCategory in (:filter_payCategories)  ";
                $params['filter_payCategories'] = UtilHelper::getIdsArrayFromObjects($appShopHasAppTab->getAppTab()->getPayCategories());
            }

        }

        if ($payMethodsAvailable && count($payMethodsAvailable) > 0)
        {
            $params['payMethods'] = $payMethodsAvailable;
            $extraPMPC .= " AND pmp.payMethod in (:payMethods)";
        }

        if ($externalStore)
        {
            $params['externalStore'] = $externalStore;
            $extraPMPC .= "pmp.externalStore = :externalStore AND ";
        }else{
            $extraPMPC .= "pmp.externalStore IS NULL AND ";
        }

        $orderBy = $orderByDefault ? 'pmp.order' : 'apmpc.order';

        $sql = "
            SELECT apmpc, a, sha, pmpc, c, pmp, pay_method
            FROM AppBundle:AppShopArticleHasPMPC apmpc
            LEFT JOIN apmpc.sms sms
            LEFT JOIN apmpc.voices voice
            JOIN apmpc.appShopHasArticle sha
            JOIN sha.article a
            JOIN a.item i
            JOIN sha.appShop app_shop WITH app_shop.levelCategory = :levelCategoryId
            JOIN app_shop.app app
            JOIN app.countries app_countries WITH sha.country = app_countries

            WHERE

                EXISTS(
                    SELECT 1
                    FROM AppBundle:AppHasPayMethodProviderCountry ahpmpc
                        JOIN ahpmpc.payMethodProviderHasCountry pmp_has_c
                        JOIN pmp_has_c.payMethodHasProvider pmp
                        JOIN pmp.payMethod pay_method

                    WHERE
                        ahpmpc.app = app.id
                        AND pay_method.articleCategory = a.articleCategory
                        AND pmp.active = :articleActive
                        AND pay_method.active = :articleActive
                        AND pmp_has_c.active = :articleActive
                        AND ahpmpc.active = :articlePMPCAActive

                        AND (
                            pay_method.payCategory != :payCategoryMobile
                            OR (pay_method.payCategory = :payCategoryMobile AND pmp.isOurImplementation = false )
                            OR (pay_method.payCategory = :payCategoryMobile AND pmp.isOurImplementation = true AND (sms.id is not null) )
                        )
                        AND (
                            pay_method.payCategory != :payCategoryVoice
                            OR (pay_method.payCategory = :payCategoryVoice AND pmp.isOurImplementation = false )
                            OR (pay_method.payCategory = :payCategoryVoice AND pmp.isOurImplementation = true AND (voice.id is not null) )
                        )

                        $extraPMPC
                )

                AND app_shop.app = :appId
                AND sha.country = :countryId
                AND pmpc.country = :countryId
                AND a.articleCategory = pay_method.articleCategory

                AND apmpc.active = :articlePMPCAActive
                AND pmp.active = :articlePMPCAActive
                AND sha.active = :articlePMPCAActive
                AND a.active = :articleActive
                AND i.active = :articleActive
                AND app_shop.active = :articleActive

                $extra

            GROUP BY pmpc.id
            ORDER BY $orderBy
        ";

        return $this->getEntityManager()
            ->createQuery($sql)
            ->setParameters($params)
            ->getResult()
        ;
    }

    /**
     * @param $appId
     * @param $levelCategoryId
     * @param $providerId
     * @param string $articleCategoryId
     * @param bool $articleActive
     * @param bool $articlePMPCAActive
     * @return \AppBundle\Entity\AppShopArticleHasPMPC []
     */
    public function findByAppIdAndLevelCategoryIdAndArticleCategoryId(
        $appId,
        $levelCategoryId,
        $providerId,
        $articleCategoryId = ArticleCategoryEnum::SINGLE_PAYMENT_ID,
        $articleActive = true,
        $articlePMPCAActive = true
    ) {
        $sql = "
            SELECT apmpc, a, sha, pmpc
            FROM AppBundle:AppShopArticleHasPMPC apmpc

            JOIN apmpc.appShopHasArticle sha
            JOIN sha.article a
            JOIN sha.appShop app_shop WITH app_shop.levelCategory = :levelCategoryId AND app_shop.app = :appId
            JOIN apmpc.payMethodProviderHasCountry pmpc
            JOIN pmpc.payMethodHasProvider pmp
            JOIN pmpc.payMethodHasProvider pmp
            JOIN pmp.payMethod pay_method

            WHERE
                 pay_method.articleCategory = :articleCategoryId
                AND apmpc.active = :articlePMPCAActive
                AND a.active = :articleActive
                AND pmp.provider = :providerId

            order by apmpc.order
        ";

        return $this->getEntityManager()->createQuery($sql)->setParameters(
            array(
                'articlePMPCAActive' => $articlePMPCAActive,
                'articleActive'      => $articleActive,
                'appId'              => $appId,
                'levelCategoryId'    => $levelCategoryId,
                'articleCategoryId'  => $articleCategoryId,
                'providerId'         => $providerId,
            )
        )->getResult();
    }

    /**
     * @param $appId
     * @param bool $active
     * @return integer
     */
    public function countByApp($appId, $active = true)
    {
        $sql = "
            SELECT count(apmpc.id)
            FROM AppBundle:AppShopArticleHasPMPC apmpc
                JOIN apmpc.appShopHasArticle sha
                JOIN sha.article a
            WHERE
                a.app = :appId AND
                apmpc.active = :active
        ";
        return $this->getEntityManager()->createQuery($sql)->setParameters(
            array(
                'appId'  => $appId,
                'active' => $active
            )
        )->getSingleScalarResult();

    }
}
